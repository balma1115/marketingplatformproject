name: Deploy to AWS

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'
  AWS_REGION: 'ap-northeast-2'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run type check
        run: npm run type-check || true

      - name: Run tests
        run: npm test || true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true

  deploy-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /home/ubuntu/marketingplatformproject

            # Pull latest changes
            git pull origin main

            # Install dependencies
            npm ci --production

            # Run database migrations
            npx prisma migrate deploy

            # Build the application
            npm run build

            # Restart PM2 process
            pm2 reload ecosystem.config.js --env production

            # Save PM2 state
            pm2 save

            echo "Deployment completed successfully!"

  deploy-lambda:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy SmartPlace Tracker Lambda
        run: |
          cd lambda/smartplace-tracker
          npm ci --production

          # Copy Prisma schema and generate client
          cp ../../prisma/schema.prisma ./
          npx prisma generate

          # Package function
          zip -rq function.zip . -x "*.git*" -x "test*"

          # Update Lambda function
          aws lambda update-function-code \
            --function-name marketingplat-smartplace-tracker \
            --zip-file fileb://function.zip \
            --region ${{ env.AWS_REGION }}

          # Update environment variables
          aws lambda update-function-configuration \
            --function-name marketingplat-smartplace-tracker \
            --environment "Variables={DATABASE_URL=${{ secrets.DATABASE_URL }}}" \
            --region ${{ env.AWS_REGION }}

      - name: Deploy Blog Tracker Lambda
        run: |
          cd lambda/blog-tracker
          npm ci --production

          # Copy Prisma schema and generate client
          cp ../../prisma/schema.prisma ./
          npx prisma generate

          # Package function
          zip -rq function.zip . -x "*.git*" -x "test*"

          # Update Lambda function
          aws lambda update-function-code \
            --function-name marketingplat-blog-tracker \
            --zip-file fileb://function.zip \
            --region ${{ env.AWS_REGION }}

          # Update environment variables
          aws lambda update-function-configuration \
            --function-name marketingplat-blog-tracker \
            --environment "Variables={DATABASE_URL=${{ secrets.DATABASE_URL }}}" \
            --region ${{ env.AWS_REGION }}

  invalidate-cache:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: [deploy-ec2, deploy-lambda]
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-ec2, deploy-lambda]
    if: always()

    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status == 'success' && 'completed successfully' || 'failed' }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment record
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deployed to AWS',
              auto_merge: false,
              required_contexts: [],
              production_environment: true
            });