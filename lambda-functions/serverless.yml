service: marketingplat-tracking

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-2
  stage: ${opt:stage, 'development'}
  timeout: 120 # 2 minutes
  memorySize: 1536 # Optimal for Playwright
  environment:
    DATABASE_URL: postgresql://postgres:Asungmini77A@marketingplat-db.c1a2b3c4d5e6.ap-northeast-2.rds.amazonaws.com:5432/marketingplat
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    # AWS_REGION is automatically set by Lambda, don't include it

  # VPC Configuration for RDS access
  vpc:
    securityGroupIds:
      - sg-0584fd2a2cc9d17e1
    subnetIds:
      - subnet-0d07a6427c0454dc7
      - subnet-00a38eb1a1c14c391

  # IAM Role permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
            - cloudwatch:PutMetricData
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
          Resource: '*'

plugins:
  - serverless-plugin-typescript

package:
  patterns:
    - '.build/**'
    - 'node_modules/**'
    - '!.git/**'
    - '!.serverless/**'
    - '!layers/**'
    - '!test/**'
    - '!*.md'
    - '!node_modules/playwright-core/**'
    - '!node_modules/playwright-aws-lambda/**'
    - '!node_modules/serverless/**'
    - '!node_modules/serverless-*/**'
    - '!node_modules/@types/**'
    - '!node_modules/typescript/**'

functions:
  smartplaceTracker:
    handler: smartplace-tracker/index.handler
    description: Track SmartPlace rankings on Naver Map
    ephemeralStorageSize: 10240 # 10GB for browser cache
    layers:
      - { Ref: PlaywrightLambdaLayer }
    events:
      - sqs:
          arn: !GetAtt SmartPlaceTrackingQueue.Arn
          batchSize: 1

  blogTracker:
    handler: blog-tracker/index.handler
    description: Track Blog rankings on Naver Search
    ephemeralStorageSize: 10240 # 10GB for browser cache
    layers:
      - { Ref: PlaywrightLambdaLayer }
    events:
      - sqs:
          arn: !GetAtt BlogTrackingQueue.Arn
          batchSize: 1

  scheduledTrigger:
    handler: scheduled-trigger/index.handler
    description: Trigger daily tracking at midnight KST
    events:
      - schedule:
          rate: cron(0 15 * * ? *)
          enabled: ${self:custom.scheduleEnabled.${self:provider.stage}}

layers:
  playwright:
    path: layers/playwright/playwright.zip
    name: ${self:service}-playwright-${self:provider.stage}
    description: Playwright Core and AWS Lambda adapter
    compatibleRuntimes:
      - nodejs18.x
    retain: false

resources:
  Resources:
    PlaywrightLambdaLayer:
      Type: AWS::Lambda::LayerVersion
      Properties:
        LayerName: ${self:service}-playwright-${self:provider.stage}
        Content: layers/playwright/playwright.zip
        CompatibleRuntimes:
          - nodejs18.x

    # Lambda Layers - Commented out for now
    # ChromiumLambdaLayer:
    #   Type: AWS::Lambda::LayerVersion
    #   Properties:
    #     LayerName: ${self:service}-chromium-${self:provider.stage}
    #     Content:
    #       S3Bucket: !Ref ServerlessDeploymentBucket
    #       S3Key: layers/chromium-layer.zip
    #     CompatibleRuntimes:
    #       - nodejs18.x
    #
    # PrismaLambdaLayer:
    #   Type: AWS::Lambda::LayerVersion
    #   Properties:
    #     LayerName: ${self:service}-prisma-${self:provider.stage}
    #     Content:
    #       S3Bucket: !Ref ServerlessDeploymentBucket
    #       S3Key: layers/prisma-layer.zip
    #     CompatibleRuntimes:
    #       - nodejs18.x

    # SQS Queues
    SmartPlaceTrackingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-smartplace-queue-${self:provider.stage}
        VisibilityTimeout: 300 # 5 minutes (longer than Lambda timeout)
        MessageRetentionPeriod: 1209600 # 14 days
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt SmartPlaceDeadLetterQueue.Arn
          maxReceiveCount: 3

    SmartPlaceDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-smartplace-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # 14 days

    BlogTrackingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-blog-queue-${self:provider.stage}
        VisibilityTimeout: 300 # 5 minutes
        MessageRetentionPeriod: 1209600 # 14 days
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt BlogDeadLetterQueue.Arn
          maxReceiveCount: 3

    BlogDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-blog-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # 14 days

    # CloudWatch Alarms
    SmartPlaceErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-smartplace-errors-${self:provider.stage}
        AlarmDescription: Alert when SmartPlace tracking errors exceed threshold
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-smartplaceTracker

    BlogErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-blog-errors-${self:provider.stage}
        AlarmDescription: Alert when Blog tracking errors exceed threshold
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-blogTracker

    DLQAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-dlq-messages-${self:provider.stage}
        AlarmDescription: Alert when messages are sent to DLQ
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: QueueName
            Value: ${self:service}-smartplace-dlq-${self:provider.stage}

  Outputs:
    SmartPlaceQueueUrl:
      Description: URL of the SmartPlace tracking SQS queue
      Value: !Ref SmartPlaceTrackingQueue
      Export:
        Name: ${self:service}-smartplace-queue-url-${self:provider.stage}

    BlogQueueUrl:
      Description: URL of the Blog tracking SQS queue
      Value: !Ref BlogTrackingQueue
      Export:
        Name: ${self:service}-blog-queue-url-${self:provider.stage}

    SmartPlaceQueueArn:
      Description: ARN of the SmartPlace tracking SQS queue
      Value: !GetAtt SmartPlaceTrackingQueue.Arn
      Export:
        Name: ${self:service}-smartplace-queue-arn-${self:provider.stage}

    BlogQueueArn:
      Description: ARN of the Blog tracking SQS queue
      Value: !GetAtt BlogTrackingQueue.Arn
      Export:
        Name: ${self:service}-blog-queue-arn-${self:provider.stage}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
        - playwright-core
        - playwright-aws-lambda
      forceInclude:
        - '@prisma/client'
    packager: npm

  scheduleEnabled:
    development: false
    staging: false
    production: true

  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002